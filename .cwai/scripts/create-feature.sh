#!/bin/bash

# Create New Feature Script
# Follows Google Bash Style Guide: https://google.github.io/styleguide/shellguide.html

set -euo pipefail

# Script configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly REPO_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
readonly SPECS_DIR="${REPO_ROOT}/.specs"
readonly TEMPLATES_DIR="${REPO_ROOT}/.cwai/templates"

# Source common helpers
source "${SCRIPT_DIR}/common.sh"
source "${SCRIPT_DIR}/github/common.sh"













# Feature-specific GitHub issue functions
create_feature_github_issue() {
    local title="$1" body="$2"
    shift 2
    local labels=("$@")

    local label_args=()

    # Create default labels if they don't exist
    create_or_get_label "feature" "0e8a16" "New feature request"
    create_or_get_label "auto-generated" "bfd4f2" "Automatically generated by script"

    # Only process labels if any were passed
    if (( $# > 0 )); then
        for label in "${labels[@]}"; do
            # Skip labels that start with - (those are for removal)
            if [[ ! "$label" =~ ^- ]]; then
                # Create label if it doesn't exist
                create_or_get_label "$label"
                label_args+=(--label "$label")
            fi
        done
    fi

    # Add default labels
    label_args+=(--label "feature" --label "auto-generated")

    log "🏷️ Creating GitHub issue: $title"
    local issue_url
    issue_url=$(gh issue create --title "Feature: $title" --body "$body" "${label_args[@]}")

    # Extract issue number from URL
    local issue_number
    issue_number=$(echo "$issue_url" | grep -o '[0-9]\+$')
    echo "$issue_number"
}

update_feature_github_issue() {
    local issue_number="$1" additional_requirement="$2"
    shift 2
    local labels=("$@")

    log "📝 Updating GitHub issue #$issue_number with additional requirement"

    # Add comment with new requirement
    gh issue comment "$issue_number" --body "## Additional Requirement

$additional_requirement

---
*Added via create-feature.sh script*"

    # Process labels only if any were passed
    if (( $# > 0 )); then
        for label in "${labels[@]}"; do
            if [[ "$label" =~ ^- ]]; then
                # Remove label (strip the - prefix)
                local label_to_remove="${label#-}"
                log "🏷️ Removing label: $label_to_remove"
                gh issue edit "$issue_number" --remove-label "$label_to_remove" 2>/dev/null || true
            else
                # Add label (create if it doesn't exist)
                create_or_get_label "$label"
                log "🏷️ Adding label: $label"
                gh issue edit "$issue_number" --add-label "$label"
            fi
        done
    fi
}

get_issue_from_branch() {
    local branch_name="$1"

    # Extract issue number from branch name (assumes format: 00123-feature-name)
    local issue_number
    issue_number=$(echo "$branch_name" | grep -o '^[0-9]\{1,5\}' | sed 's/^0*//')

    if [[ -n "$issue_number" && "$issue_number" != "0" ]]; then
        # Verify the issue exists
        if gh issue view "$issue_number" >/dev/null 2>&1; then
            echo "$issue_number"
        fi
    fi
}

# Default values / flags
output_json=false
requirement=""
templates=()
labels=()
title=""

# Function to display usage
usage() {
    cat << EOF
Usage: $0 <requirement> [OPTIONS]

Required arguments:
    <requirement>           Feature requirement description

Optional arguments:
  --json                  Output data as JSON instead of text
  --title <title>         Explicit title for the feature (auto-generated from requirement if not provided)
  --template|-t <name>    Template to copy (can be used multiple times)
                          Available: raw-design (raw), high-level-design (hld), low-level-design (lld), game-design (game)
  --label|-l <label>      Label to add to GitHub issue (can be used multiple times)
                          Use -<label> to remove a label (e.g., -development)

Examples:
    $0 "Users need to login securely" --template high-level-design --label authentication --label security
    $0 "00012-user-authentication Add MFA support" --template low-level-design --label -development --json
    $0 "Add user dashboard" --title "User Dashboard Feature" --template raw-design --template game-design
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --json)
            output_json=true
            shift
            ;;
        --title)
            title="$2"
            shift 2
            ;;
        --template|-t)
            templates+=("$2")
            shift 2
            ;;
        --label|-l)
            labels+=("$2")
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            error_exit "Unknown option: $1. Use --help for usage information."
            ;;
        *)
            if [[ -n "$requirement" ]]; then
                requirement="$requirement $1"
            else
                requirement="$1"
            fi
            shift
            ;;
    esac
done

# Validate required arguments
if [[ -z "${requirement}" ]]; then
    error_exit "Requirement is required. Provide the requirement as arguments."
fi

# Initialize environment and dependencies
load_environment
validate_dependencies
validate_github_token

# Main execution
create_new_feature() {
    local req="$1"
    local feature_title feature_slug issue_number feature_name feature_dir current_branch branch_created copied_files=()

    # Ensure we're on main branch for new features
    current_branch=$(git branch --show-current)
    if [[ "$current_branch" != "main" && "$current_branch" != "master" ]]; then
        error_exit "Cannot create new feature from branch '$current_branch'. Please switch to main/master branch first."
    fi

    # Determine title
    if [[ -n "$title" ]]; then
        feature_title="$title"
    else
        feature_title=$(requirement_to_title "$req")
    fi

    # Create GitHub issue first to get the ID
    if (( ${#labels[@]} > 0 )); then
        issue_number=$(create_feature_github_issue "$feature_title" "$req" "${labels[@]}")
    else
        issue_number=$(create_feature_github_issue "$feature_title" "$req")
    fi

    # Validate issue creation succeeded
    if [[ -z "$issue_number" || "$issue_number" == "0" ]]; then
        error_exit "Failed to create GitHub issue. Check your authentication and repository access."
    fi

    log "✅ Created GitHub issue #$issue_number"

    # Build feature identifiers using issue number
    feature_slug=$(title_to_slug "$feature_title")
    feature_name=$(printf "%05d" "$issue_number")-${feature_slug}
    feature_dir="${SPECS_DIR}/${feature_name}"

    log "🚀 Creating feature: ${feature_name}"

    # Create and switch to feature branch
    log "Creating new branch: ${feature_name}"
    git checkout -b "${feature_name}" >/dev/null 2>&1 || error_exit "Failed to create branch ${feature_name}"
    branch_created=true

    mkdir -p "${feature_dir}"
    log "📁 Directory ensured: ${feature_dir}"

    # Copy templates if specified
    if (( ${#templates[@]} > 0 )); then
        while IFS= read -r __line || [[ -n "${__line}" ]]; do
            [[ -n "${__line}" ]] && copied_files+=("${__line}")
        done < <(copy_templates_wrapper "${feature_dir}" "${templates[@]}" || true)
    else
        log "ℹ️  No templates specified. Only creating directory structure."
    fi

    # Output results
    if (( ${#copied_files[@]:-0} > 0 )); then
        output_results_create "${feature_name}" "${feature_dir}" "${branch_created}" "${feature_name}" "$issue_number" "$feature_title" "$req" "${output_json}" "${copied_files[@]}"
    else
        output_results_create "${feature_name}" "${feature_dir}" "${branch_created}" "${feature_name}" "$issue_number" "$feature_title" "$req" "${output_json}"
    fi
}

update_existing_feature() {
    local feature_branch="$1"
    local issue_number feature_dir feature_id copied_files=()

    assert_clean_repo
    if ! git_branch_exists "${feature_branch}"; then
        error_exit "Branch '${feature_branch}' does not exist"
    fi

    feature_dir="${SPECS_DIR}/${feature_branch}"
    if [[ ! -d "${feature_dir}" ]]; then
        error_exit "Feature directory '${feature_dir}' not found"
    fi

    log "🔄 Switching to existing feature branch: ${feature_branch}"
    git_checkout_existing_or_remote "${feature_branch}"

    # Get GitHub issue number from branch
    issue_number=$(get_issue_from_branch "${feature_branch}")
    if [[ -z "$issue_number" ]]; then
        error_exit "Could not determine GitHub issue number from branch '${feature_branch}'"
    fi

    log "📝 Found associated GitHub issue: #${issue_number}"

    # Update GitHub issue with additional requirements and labels
    if (( ${#labels[@]} > 0 )); then
        update_feature_github_issue "$issue_number" "$requirement" "${labels[@]}"
    else
        update_feature_github_issue "$issue_number" "$requirement"
    fi

    feature_id=$(extract_feature_id "${feature_branch}")

    # Copy templates if specified
    if (( ${#templates[@]} > 0 )); then
        while IFS= read -r __line || [[ -n "${__line}" ]]; do
            [[ -n "${__line}" ]] && copied_files+=("${__line}")
        done < <(copy_templates_wrapper "${feature_dir}" "${templates[@]}" || true)
    fi

    # Output results
    if (( ${#copied_files[@]:-0} > 0 )); then
        output_results_update "${feature_branch}" "${feature_dir}" "${feature_id}" "${issue_number}" "${output_json}" "${copied_files[@]}"
    else
        output_results_update "${feature_branch}" "${feature_dir}" "${feature_id}" "${issue_number}" "${output_json}"
    fi
}

main() {
    local detected
    detected=$(detect_feature_branch_from_requirement "${requirement}")
    if [[ -n "${detected}" ]]; then
        log "Detected existing feature reference: ${detected}"
        update_existing_feature "${detected}"
    else
        log "No existing feature reference found; creating new feature"
        create_new_feature "${requirement}"
    fi
}

# Run main function
main
