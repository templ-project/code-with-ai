#######################################
# Creates a GitHub issue with the specified title, body, and labels.
# Automatically adds "task" and "auto-generated" labels to all issues.
# Creates any missing labels before applying them to the issue.
# Globals:
#   None
# Arguments:
#   $1 - Issue title (required)
#   $2 - Issue body/description (required)
#   $3+ - Additional labels to apply (optional, variadic)
# Outputs:
#   Log messages during issue creation process
#   Issue number to stdout
# Returns:
#   0 on success, non-zero on failure
# Notes:
#   - Labels starting with "-" are skipped (reserved for future removal functionality)
#   - Always adds default labels: "task" (green) and "auto-generated" (light green)
#   - Creates labels if they don't exist with default colors
#######################################
create_issue() {
  local title="$1" body="$2"
  shift 2
  local labels=("$@")

  local label_args=()

  # Create default labels if they don't exist
  _create_or_get_label "task" "0e8a16" "Task item"
  _create_or_get_label "auto-generated" "bfd4f2" "Automatically generated by script"

  # Only process labels if any were passed
  if (($# > 0)); then
    for label in "${labels[@]}"; do
      # Skip labels that start with - (those are for removal)
      if [[ ! "$label" =~ ^- ]]; then
        # Create label if it doesn't exist
        _create_or_get_label "$label"
        label_args+=(--label "$label")
      fi
    done
  fi

  # Add default labels
  label_args+=(--label "task" --label "auto-generated")

  log_info "🏷️ Creating GitHub issue: $title"
  local issue_url
  issue_url=$(gh issue create --title "$title" --body "$body" "${label_args[@]}")

  # Extract issue number from URL
  local issue_number
  issue_number=$(echo "$issue_url" | grep -o '[0-9]\+$')
  echo "$issue_number"
}

#######################################
# Creates a parent-child relationship between two GitHub issues.
# Adds bidirectional comments linking the issues together.
# Globals:
#   None
# Arguments:
#   $1 - Child issue number (required)
#   $2 - Parent issue number (required)
# Outputs:
#   Log messages during relationship creation
# Returns:
#   0 on success
# Exits:
#   With error message if parent issue doesn't exist
# Notes:
#   - Verifies parent issue exists before creating relationship
#   - Adds comment to child issue referencing parent
#   - Adds comment to parent issue referencing child
#######################################
update_issue_parent() {
  local child_issue="$1"
  local parent_issue="$2"

  # TODO: This is actually a github project feature, not a github issue feature. After fixing the project_add_issue function, we can refactor this as well.

  log_info "🔗 Adding parent relationship: #$child_issue -> #$parent_issue"

  # Verify parent issue exists
  if ! gh issue view "$parent_issue" > /dev/null 2>&1; then
    error_exit "Parent issue #$parent_issue does not exist"
  fi

  # Add comment to child issue referencing parent
  gh issue comment "$child_issue" --body "**Parent Task:** #$parent_issue

This task is a subtask of #$parent_issue.

---
*Relationship added via create-issue.sh script*" > /dev/null 2>&1

  # Add comment to parent issue referencing child
  gh issue comment "$parent_issue" --body "**Subtask Created:** #$child_issue

New subtask created and linked to this parent task.

---
*Relationship added via create-issue.sh script*" > /dev/null 2>&1

  log_info "✅ Parent relationship established between #$child_issue and #$parent_issue"
}

project_add_issue() {
  log_warn "It appears gh project item-add is not working properly. Adding issue to project is disabled temporarily."
  return 0

  local issue_number="$1"
  local project_name="$2"

  [ -z "$issue_number" ] && log_error "No issue mentioned to add to project."
  [ -z "$project_name" ] && log_error "No project assign issue to"

  local owner_args=()
  local project_owner="$3"

  if [ -n "$project_owner" ]; then
    owner_args+=(--owner "$project_owner")
  fi

  local project_number
  if [ -n "$project_name" ]; then
    project_number=$(_get_project_number "$project_name" "$project_owner")
  fi

  if [ -z "$project_number" ]; then
    log_error "Invalid project $project_name; cannot assign issue to project"
  fi

  log_info "📋 Adding issue #$issue_number to project: $project_name / $project_number"

  issue_url=$(gh issue view "$issue_number" --json url --jq '.url')
  log_info "Issue url: $issue_url"

  gh project item-add "$project_name" --url "$issue_url"
  return 0
  # Add issue to project
  if gh project item-add "$project_number" --owner "@me" --url "$issue_url" > /dev/null 2>&1; then
    log_info "✅ Added issue #$issue_number to project '$project_name'"
  else
    log_error "⚠️ Failed to add issue to project."
  fi
}

#######################################
# Validates that required command-line dependencies are installed.
# Checks for GitHub CLI (gh) and jq JSON processor availability.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None (unless dependencies are missing)
# Returns:
#   0 if all dependencies are available
# Exits:
#   With error message if any required dependencies are missing
#######################################
validate_dependencies() {
  local missing_deps=()

  # Check for gh CLI
  if ! command -v gh > /dev/null 2>&1; then
    missing_deps+=("gh (GitHub CLI)")
  fi

  # Check for jq
  if ! command -v jq > /dev/null 2>&1; then
    missing_deps+=("jq")
  fi

  if ((${#missing_deps[@]} > 0)); then
    error_exit "Missing required dependencies: ${missing_deps[*]}. Please install them and try again."
  fi
}

#######################################
# Validates GitHub authentication token and sets up authentication.
# Checks for GH_TOKEN environment variable and verifies GitHub CLI auth status.
# Globals:
#   GH_TOKEN - GitHub personal access token (read from environment)
# Arguments:
#   None
# Outputs:
#   Warning message if gh CLI authentication status check fails
# Returns:
#   0 if token is available
# Exits:
#   With error message if GH_TOKEN is not set
# Notes:
#   - Exports GH_TOKEN for gh CLI to use
#   - Proceeds even if gh auth status fails, as token may still work
#######################################
validate_token() {
  if [[ -z "${GH_TOKEN:-}" ]]; then
    error_exit "GH_TOKEN not found in environment. Please set it in .env file or environment."
  fi

  # Export GH_TOKEN for gh CLI to use
  export GH_TOKEN

  # Test GitHub authentication
  if ! gh auth status > /dev/null 2>&1; then
    log_info "⚠️ gh CLI not authenticated, but GH_TOKEN is available. Proceeding..."
  fi
}

#######################################
# Creates a GitHub label if it doesn't exist, or returns successfully if it does.
# This is an internal helper function for managing GitHub repository labels.
# Globals:
#   None
# Arguments:
#   $1 - Label name (required)
#   $2 - Label color in hex format without # (optional, defaults to "1f77b4" - blue)
#   $3 - Label description (optional, defaults to empty)
# Outputs:
#   Log message when creating a new label
# Returns:
#   0 if label exists or was created successfully
#   Non-zero if label creation failed
#######################################
_create_or_get_label() {
  local label_name="$1"
  local label_color="${2:-1f77b4}" # Default blue color
  local label_description="${3:-}"

  # Check if label exists
  if gh label list --json name --jq ".[].name" | grep -q "^${label_name}$"; then
    return 0 # Label exists
  fi

  # Create label if it doesn't exist
  log_info "🏷️ Creating label: $label_name"
  if [[ -n "$label_description" ]]; then
    gh label create "$label_name" --color "$label_color" --description "$label_description" > /dev/null 2>&1
  else
    gh label create "$label_name" --color "$label_color" > /dev/null 2>&1
  fi
}

#######################################
# Retrieves the ID of a GitHub project by name and optional owner.
# Uses GitHub CLI to query projects and extracts the numeric ID.
# Globals:
#   None
# Arguments:
#   $1 - Project name (required) - exact project title including @ prefix if present
#   $2 - Project owner (optional) - GitHub username or organization name
# Outputs:
#   Project ID to stdout if found, empty string if not found
# Returns:
#   0 on success (regardless of whether project was found)
#   Non-zero if GitHub CLI command fails
# Notes:
#   - Project names should match exactly as they appear in GitHub (e.g., "@templ-project")
#   - If owner is not specified, searches across all accessible projects
#   - Suppresses error output to avoid noise when project is not found
#######################################
_get_project_number() {
  local project_name="$1"
  local project_owner="$2"

  local owner_args=()

  if [ -n "$project_owner" ]; then
    owner_args+=(--owner "$project_owner")
  fi

  # gh project list $owner_args --format json

  # Get project ID using gh CLI with correct format
  local project_number
  # The project name in GitHub includes @ prefix, so we need to match exactly
  project_number=$(gh project list $owner_args --format json | jq -r ".projects[] | select(.title == \"$project_name\") | .number" 2> /dev/null)

  echo "$project_number"
}
